from abc import ABC, abstractmethod
from overrides import override
from playwright.sync_api import Playwright, sync_playwright, Browser, BrowserContext, Page
import RequestData.User as User


class AbstractRequester(ABC):
    """
    Abstract class for requesting data from the MPU SIWeb
    """

    def __init__(self, user: User.AbstractUser) -> None:
        self.siweb_link: str = "https://account.ipm.edu.mo/authenticationendpoint/login.do?Name" \
                               "=PreLoginRequestProcessor&TARGET=https%3A%2F%2Fbanner-prod-xe-01.ipm.edu.mo%3A8446" \
                               "%2FBannerExtensibility%2Fj_spring_cas_security_check&commonAuthCallerPath=%252Fcas" \
                               "%252Flogin&forceAuth=true&passiveAuth=false&tenantDomain=carbon.super&sessionDataKey" \
                               "=2fba424e-0738-4a24-aa2b-07699ba6fdde&relyingParty=BannerExtensibility&type=cas&sp" \
                               "=BannerExtensibility&isSaaSApp=false&authenticators=BasicAuthenticator%3ALOCAL"
        self.timetable_link: str = "https://wapps2.ipm.edu.mo/siweb_cas/time_stud.asp"
        self.user: User.AbstractUser = user
        self.wait_time_unit: int = 500

    @abstractmethod
    def get_timetable_html(self) -> str:
        """
        Get the timetable html from the MPU SIWeb class time
        :return: source code (html) of the timetable
        """
        pass


class PlaywrightRequester(AbstractRequester):
    """
    Requester using Playwright library to get the timetable
    """

    def __init__(self, user: User.AbstractUser, is_debug: bool = False) -> None:
        super().__init__(user)
        self.is_debug: bool = is_debug
        self.timetable_page: str = self.requestTimetablePage()

    @override
    def get_timetable_html(self) -> str:
        return self.timetable_page

    def requestTimetablePage(self) -> str:
        """
        Request the timetable page from SIweb using playwright
        :return:
        """
        with sync_playwright() as playwright:
            page: str = self.run(playwright)
        return page

    def run(self, playwright: Playwright) -> str:
        """
        this code is generated by playwright recorder
        :param playwright: synchronous playwright
        :return: source code (html) of the timetable
        """

        browser: Browser = playwright.chromium.launch(headless=not self.is_debug)
        context: BrowserContext = browser.new_context()
        siweb_page: Page = context.new_page()
        siweb_page.goto(self.siweb_link)
        siweb_page.wait_for_timeout(self.wait_time_unit)  # wait for log in
        siweb_page.get_by_placeholder("Username").click()
        siweb_page.get_by_placeholder("Username").fill(self.user.get_username())
        siweb_page.get_by_placeholder("Password").click()
        siweb_page.get_by_placeholder("Password").fill(self.user.get_password())
        siweb_page.get_by_role("button", name="Continue").click()
        siweb_page.wait_for_timeout(self.wait_time_unit * 4)  # wait for authorization

        # in this case, we have the login cookie , so we can get the page directly
        timetable_page: Page = context.new_page()
        timetable_page.wait_for_timeout(self.wait_time_unit * 4)
        timetable_page.goto(self.timetable_link)
        timetable_page.get_by_role("table").filter(  # to check if the page is loaded
            has_text="Sem Class Code Learning Module Instructor Venue Period Time Sun Mon Tue Wed Thu ").click()
        siweb_page.get_by_role("link", name="Logout").click()
        siweb_page.get_by_role("link", name="Return to your application.").click()

        timetable_page_data = timetable_page.content()
        # ---------------------
        context.close()
        browser.close()
        return timetable_page_data
